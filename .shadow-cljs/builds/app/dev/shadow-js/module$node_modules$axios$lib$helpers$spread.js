["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/axios/lib/helpers/spread.js"],"~:js","shadow$provide.module$node_modules$axios$lib$helpers$spread=function(global,require,module,exports){Object.defineProperty(exports,\"__esModule\",{value:!0});exports.default=function(callback){return function(arr){return callback.apply(null,arr)}}}","~:source","shadow$provide[\"module$node_modules$axios$lib$helpers$spread\"] = function(global,require,module,exports) {\n'use strict';\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n *\n * @returns {Function}\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = spread;\n\nfunction spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1677224415777,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$axios$lib$helpers$spread.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,CAAA,4CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwBzGC,MAAOC,CAAAA,cAAP,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAGAH,QAAQI,CAAAA,OAAR,CAEAC,QAAe,CAACC,QAAD,CAAW,CACxB,MAAOC,SAAa,CAACC,GAAD,CAAM,CACxB,MAAOF,SAASG,CAAAA,KAAT,CAAe,IAAf,CAAqBD,GAArB,CADiB,CADF,CA7B+E;\",\n\"sources\":[\"node_modules/axios/lib/helpers/spread.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$axios$lib$helpers$spread\\\"] = function(global,require,module,exports) {\\n'use strict';\\n/**\\n * Syntactic sugar for invoking a function and expanding an array for arguments.\\n *\\n * Common use case would be to use `Function.prototype.apply`.\\n *\\n *  ```js\\n *  function f(x, y, z) {}\\n *  var args = [1, 2, 3];\\n *  f.apply(null, args);\\n *  ```\\n *\\n * With `spread` this example can be re-written.\\n *\\n *  ```js\\n *  spread(function(x, y, z) {})([1, 2, 3]);\\n *  ```\\n *\\n * @param {Function} callback\\n *\\n * @returns {Function}\\n */\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = spread;\\n\\nfunction spread(callback) {\\n  return function wrap(arr) {\\n    return callback.apply(null, arr);\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"spread\",\"callback\",\"wrap\",\"arr\",\"apply\"]\n}\n"]