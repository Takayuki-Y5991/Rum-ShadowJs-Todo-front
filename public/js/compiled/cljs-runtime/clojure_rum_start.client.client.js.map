{"version":3,"sources":["clojure_rum_start/client/client.cljs"],"mappings":";AAGA,6CAAA,7CAAMA,kGAAYC;AAAlB,AACM,UAAA,NAAMC;cAAN,2CAAA,oDAAA,OAAA,uDAAA,OAAA,iGAAA,2DAAA,2CAAA,eAAA,pYACMC,oOAEkB,AAACC,eAAkB,AAACC,qBAAQJ;AAHpD,OAKS,AAACK,MAASJ,IAAI,AAACG,qBAAQF,tCACvB,sDAAA,WAAAI;AAAA,AAAS,mDAAAA,5CAACC;;;AAEzB,+CAAA,/CAAMC,sGAAcR,KAAKS;AAAzB,AACM,IAAMR,MAAI,CAAA,uFAAgDQ;cAA1D,2CAAA,oDAAA,OAAA,uDAAA,QAAA,iGAAA,2DAAA,2CAAA,eAAA,rYACMP,qOAGkB,AAACC,eAAkB,AAACC,qBAAQJ;AAJpD,OAOS,AAACK,MAASJ,IAAI,AAACG,qBAAQF,tCACvB,sDAAA,WAAAQ;AAAA,AAAS,mDAAAA,5CAACH;;;AACzB,0CAAA,1CAAMI,2FAAQF;AAAd,AACM,IAAMR,MAAI,CAAA,0EAAmCQ;cAA7C,2CAAA,oDAAA,OAAA,uDAAA,SAAA,2DAAA,2CAAA,eAAA,rSACMP;AADN,OAKS,AAACG,MAASJ,IAAI,AAACG,qBAAQF,tCACvB,sDAAA,WAAAU;AAAA,AAAS,mDAAAA,5CAACL;;;AAEzB,2CAAA,3CAAMM,8FAAUC;AAAhB,OACS,MAAA,8BAAA,2CAAA,oDAAA,OAAA,uDAAA,jMAACT,AAED,qNAAO,WAAKU,vOACZ;AADO,AAAe,OAAOA;SACtB,WAAKC;AAAL,AAAW,IAAMC,WAAS,iHAAA,2EAAA,5LAACC,0DAAQF;IAClBG,mBAAiB,4CAAA,WAAAC,vDAACC;AAAD,AAAM,qDAAAD,iBAAA,/DAACE,iIAAoB,AAACC,0CAAY,AAAA,gGAAAH;GAAkBH;AADjF,AAEK,QAACH,0CAAAA,4DAAAA,pBAAUK,wCAAAA","names":["clojure-rum-start.client.client/createTodo","todo","url","options","js/JSON.stringify","cljs.core/clj->js","js/fetch","p1__15985#","clojure-rum-start.util.common/error-handler","clojure-rum-start.client.client/updateStatus","id","p1__15986#","clojure-rum-start.client.client/delete","p1__15987#","clojure-rum-start.client.client/fetchAll","set-todos","response","json","clj-json","cljs.core.js__GT_clj","todos-with-dates","p1__15988#","cljs.core.map","cljs.core.assoc","clojure-rum-start.util.parser/format-date"],"sourcesContent":["(ns clojure-rum-start.client.client\n  (:require [clojure-rum-start.util.common :refer [error-handler]]\n            [clojure-rum-start.util.parser :refer [format-date]]))\n(defn createTodo [todo]\n      (let [url \"http://localhost:3000/todo\"\n            options {:mode    \"cors\"\n                     :method  \"POST\"\n                     :body    (js/JSON.stringify (clj->js todo))\n                     :headers {\"Content-Type\" \"application/json\"}}]\n           (-> (js/fetch url (clj->js options))\n               (.catch #(error-handler %)))))\n\n(defn updateStatus [todo id]\n      (let [url (str \"http://localhost:3000/todo/changeStatus/\" id)\n            options {\n                     :mode    \"cors\"\n                     :method  \"PATCH\"\n                     :body    (js/JSON.stringify (clj->js todo))\n                     :headers {\"Content-Type\" \"application/json\"}\n                     }]\n           (-> (js/fetch url (clj->js options))\n               (.catch #(error-handler %)))))\n(defn delete [id]\n      (let [url (str \"http://localhost:3000/todo/\" id)\n            options {:mode    \"cors\"\n                     :method  \"DELETE\"\n                     :headers {\"Content-Type\" \"application/json\"}\n                     }]\n           (-> (js/fetch url (clj->js options))\n               (.catch #(error-handler %)))))\n\n(defn fetchAll [set-todos]\n     (-> (js/fetch \"http://localhost:3000/todos\" {:mode   \"cors\"\n                                                  :method \"GET\"})\n         (.then (fn [response] (.json response)))\n         (.then (fn [json] (let [clj-json (js->clj json :keywordize-keys true)\n                                 todos-with-dates (map #(assoc % :limit_date (format-date (:limit_date %))) clj-json)]\n                                (set-todos todos-with-dates))))))"]}