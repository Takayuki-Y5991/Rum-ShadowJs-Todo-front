{"version":3,"sources":["clojure_rum_start/part/todoItem.cljs"],"mappings":";AAIA,8CAAA,9CAAMA,oGAAaC,QAAQC,gBAAgBC,UAAUC;AAArD,AACE,IAAMC,YAAU,4CAAA,WAAAC,vDAACC;AAAD,AAAM,GAAI,AAACC,6CAAE,AAAA,gFAAAF,kBAAQL;AACb,qDAAAK,iBAAA,/DAACG,8HAAoBP;;AADvBI;;GAGDH;AAHrB,AAIE,QAACC,+CAAAA,0DAAAA,bAAeC,sCAAAA;;AAGpB,8CAAA,9CAAMK,oGAAaT,QAAQE,UAAUC;AAArC,AACE,IAAMC,YACe,+CAAA,WAAAM,1DAACC;AAAD,AAAS,OAACC,gDAAK,AAAA,gFAAAF,kBAAQV;GADvBE;AAArB,AAEE,QAACC,+CAAAA,0DAAAA,bAAeC,sCAAAA;;AAKpB,4CAAA,AAAAS,oBAAAC,oBAAA,pFAAUO,+FAAWC,KAAKC,WAAWpB;AAArC,AAAA,AAAA,IACQH,UAAQ,AAAA,gFAAKsB;IACbE,mBAAiB,AAAA,6FAAYF;AAFrC,AAAA,OAAAP,6BAAA,KAAA,uBAAA,yEAAA,QAAA,CAAA,iBAAAC,nHAGoBhB,yBACU,oCAAA,QAAA,1BAAIwB,qFACX,AAAA,oFAAQF;AAL/B,AAAA,OAAAP,6BAAA,KAAA,EAAA,AAAAE,qBAAAD,aAAA,AAAAE,wCAAA,AAAAC,2HAAA,2CAAA,wDAAA,mFAAA,+BAAAH,kBAAA,aAAA,iBAAA,EAAA,AAAAC,qBAAAD,aAAA,KAAA,CAAA,AAAAI,+BAAAJ;KAAA,AAAAD,6BAAA,MAAA,aAAA,cAAA,CAAA,kBAAA,AAAAK,wIAAA,AAAAL,6BAAA,MAAA,aAAA,iBAAA,CAAA,AAAAA,6BAAA,QAAA,QAAA,oGAAA,5TAM8B,AAAA,gGAAaO,yIAGlB,oCAAA,eAAA,jCAAIE;AAT7B,AAU0B,AACE,6CAAA,2CAAA,xFAACC,kJAAuB,AAACC,cAAIF,0BAAmBxB;;AAChD,OAACD,4CAAYC,QACA,AAAC0B,cAAIF,kBACLD,WACApB;IAfzC,IAAA,AAAAY,6BAAA,QAAA,QAAA,iBAAA,yBAAA;AAAA,AAkB0B,AACE,AAACY,wCAAO3B;;AACR,OAACS,4CAAYT,QAAQuB,WAAWpB;IApB5D;GAAA,KAAA","names":["clojure-rum-start.part.todoItem/updateTodos","todo-id","complete-status","now-todos","set-todos-atom","new-todos","p1__15929#","cljs.core.map","cljs.core._EQ_","cljs.core.assoc","clojure-rum-start.part.todoItem/deleteTodos","p1__15933#","cljs.core.filter","cljs.core.not_EQ_","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","attrs15939","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","clojure-rum-start.part.todoItem/todo-item","todo","todos-atom","completed-status","clojure-rum-start.client.client/updateStatus","cljs.core/not","clojure-rum-start.client.client/delete"],"sourcesContent":["(ns clojure-rum-start.part.todoItem\n  (:require [clojure-rum-start.client.client :refer [delete updateStatus]]\n            [rum.core :as rum]))\n\n(defn updateTodos [todo-id complete-status now-todos set-todos-atom]\n  (let [new-todos (map #(if (= (:id %) todo-id)\n                          (assoc % :completed  complete-status)\n                          %)\n                       now-todos)]\n    (set-todos-atom new-todos)\n    ))\n\n(defn deleteTodos [todo-id now-todos set-todos-atom]\n  (let [new-todos (->> now-todos\n                       (filter #(not= (:id %) todo-id)))]\n    (set-todos-atom new-todos)\n    ))\n\n\n\n(rum/defc todo-item [todo todos-atom set-todos-atom]\n  (let [todo-id (:id todo)\n        completed-status (:completed todo)]\n    [:li.card {:key todo-id\n               :style {:color (if completed-status \"green\" \"red\")}}\n     [:h3.todo-content (:title todo)]\n     [:div.todo-limit \"\u671f\u9650 : \" (:limit_date todo)]\n     [:div.update-button\n      [:input {:type     :button\n               :value    (if completed-status \"\u5b8c\u4e86\" \"\u672a\u5b8c\u4e86\")\n               :on-click #(do \n                            (updateStatus  {:status (not completed-status)} todo-id) \n                            (updateTodos todo-id \n                                         (not completed-status)\n                                         todos-atom\n                                         set-todos-atom))}]\n      [:input {:type     :button\n               :value    \"\u524a\u9664\"\n               :on-click #(do\n                            (delete todo-id)\n                            (deleteTodos todo-id todos-atom set-todos-atom)\n                            )}]]]))"]}