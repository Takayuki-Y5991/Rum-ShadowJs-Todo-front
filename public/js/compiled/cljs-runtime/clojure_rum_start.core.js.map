{"version":3,"sources":["clojure_rum_start/core.cljs"],"mappings":"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","names":["clojure-rum-start.core/create-date","js/Date","js/clojure-rum-start","js/clojure-rum-start.core","js/clojure-rum-start.core.todos","clojure-rum-start.core/todos","cljs.core.atom","clojure-rum-start.core/format-date","date-str","temp__5802__auto__","date","cljs.core/not","js/isNaN","clojure-rum-start.core/create-todo","todo","url","options","js/JSON.stringify","js/fetch","p1__12945#","cljs.core.not_EQ_","js/Error","clojure-rum-start.core/update-status","id","p1__12946#","clojure-rum-start.core/delete","p1__12947#","clojure-rum-start.core/remove-todo","todos","todo-id","p1__12948#","cljs.core.filter","rum.core/lazy-build","rum.core/build-defc","vec__12949","cljs.core.nth","daiquiri.core/create-element","attrs12952","cljs.core/map?","daiquiri.interpreter/element-attributes","daiquiri.normalize.merge_with_class","daiquiri.interpreter/interpret","clojure-rum-start.core/todo-item","completed-status","is-completed-status!","rum.core/use-state","vec__12955","vec__12958","rum.core/mark-sync-update","p1__12953#","p1__12954#","clojure-rum-start.core/todo-form","task","set-task!","limit","set-limit!","G__12967","G__12968","e","new-todo","G__12969","cljs.core.into_array","iter__5523__auto__","s__12973","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__12975","cljs.core/chunk-buffer","i__12974","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__12972","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","clojure-rum-start.core/hello-world","rum.core.use_effect_BANG_","js/console.log","clojure-rum-start.core/start","rum.core/mount","js/document","clojure-rum-start.core/init","clojure-rum-start.core/stop","clojure-rum-start.core/fetchAll","response","json","clj-json","cljs.core.js__GT_clj","todos-with-dates","p1__12976#","cljs.core.map","cljs.core.assoc","cljs.core/reset!","cljs.core/chunk-first"],"sourcesContent":["(ns clojure-rum-start.core\n  (:require [clojure.string :as str]\n            [rum.core :as rum]))\n\n(defn create-date []\n  (str (.getFullYear (js/Date.)) \"-\" (.getMonth (js/Date.)) \"-\" (.getDate(js/Date.))))\n\n\n( defonce todos ( atom nil))\n\n\n(defn format-date [date-str]\n  (if-let [date-str date-str]\n    (let [date (js/Date. date-str)]\n      (if-not (js/isNaN date)\n        (str (.. date (getFullYear))\n             \"-\"\n             (-> date (.getMonth) inc str)\n             \"-\"\n             (-> date (.getDate) str))\n        \"invalid date\"))\n    \"\"))\n\n\n\n(defn create-todo [todo]\n  (let [url \"http://localhost:3000/todo\"\n        options {:mode \"cors\"\n                 :method 'POST'\n                 :body (js/JSON.stringify todo)\n                 :headers {\"Content-Type\" \"application/json\"}}]\n    (-> (js/fetch url options)\n        (.then #(when (not= 204 (.status %))\n                  (throw (js/Error. \"Failed to create todo\")))))))\n\n(defn update-status [todo id]\n  (let [url (str \"http://localhost:3000/todo/changeStatus/\" id)\n        options {\n                 :mode \"cors\"\n                 :method 'PATCH'\n                 :body (js/JSON.stringify todo)\n                 :headers {\"Content-Type\" \"application/json\"}\n        }]\n    (-> (js/fetch url options)\n        (.then #(when (not= 200 (.status %))\n                  (throw (js/Error. \"Failed to update status todo\")))))))\n\n(defn delete [id]\n  (let [url (str \"http://localhost:3000/todo/\" id)\n        options {:mode \"cors\"\n                 :method 'DELETE'\n                 :headers {\"Content-Type\" \"application/json\"}\n                 }]\n    (-> (js/fetch url options)\n        (.then #(when (not= 204 (.status %))\n                  (throw (js/Error. \"Failed to Delete todo\")))))))\n  \n\n(defn remove-todo [todos todo-id]\n  (filter #(not= (:id %) todo-id) todos))\n\n(rum/defc todo-item [todo]\n  (let [[completed-status is-completed-status!](rum/use-state (:completed todo))\n        todo-id (:id todo)]\n    [:li.card {:key todo-id :style {:color (if completed-status \"green\" \"red\")}}\n      [:h3.todo-content (:title todo)]\n      [:div.todo-limit \"\u671f\u9650 : \" (:limit_date todo)]\n      [:div.update-button\n       [:input {:type :button\n                :value (if completed-status \"\u5b8c\u4e86\" \"\u672a\u5b8c\u4e86\")\n                :on-click #(update-status {:status (not completed-status)} todo-id)}]\n        ; #(is-completed-status! (not completed-status))\n       [:input {:type :button\n                :value \"\u524a\u9664\"\n                :on-click #(delete todo-id)}]\n      ;  #(swap! todos remove-todo todo-id)\n      ]\n    ]\n  )\n)\n\n(rum/defc todo-form [] \n  (let [[task set-task!] (rum/use-state \"\")\n        [limit set-limit!] (rum/use-state (create-date))]\n    [:div.add-content\n     [:h3 \"ADD TODO\"]\n     [:form\n      [:span {:style {:margin \"0 20px\"}} \"TODO\u540d: \"]\n      [:input {:type :text\n               :value task\n               :placeholder \"Add a new item\"\n               :on-change #(set-task! (.. % -target -value))}]\n      [:span {:style {:margin \"0 20px\"}} \"\u671f\u9650 :\"]\n      [:input {:type :date\n               :value limit\n               :on-change #(set-limit! (.. % -target -value))}]\n      [:input {:type :submit\n               :value \"\u767b\u9332\"\n               :style {:margin \"0 20px\"}\n               :on-click (fn [e]\n                           (.preventDefault e)\n                           (let [new-todo {\n                                           :title task \n                                           :limit_date limit}]\n                             (create-todo new-todo)\n                             (set-task! \"\")\n                             (set-limit! (create-date)) \n                             )\n                           )}]]])\n  )\n  \n(rum/defc hello-world []\n  ; React Hooks Settings \n  (rum/use-effect!\n   (fn []\n     \n     (js/console.log @todos)\n     ) [@todos])\n  [:div\n   [:div.heading\n    [:h1 \"MY TODO\"]]\n   (todo-form)\n   [:div\n    [:ul.container {:style {:list-style \"none\"}}\n     (for [todo @todos]\n       (todo-item todo))]]])\n\n(defn start []\n  ;; start is called by init and after code reloading finishes\n  ;; this is controlled by the :after-load in the config\n  (rum/mount (hello-world)\n             (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n  ;; init is called ONCE when the page loads\n  ;; this is called in the index.html and must be exported\n  ;; so it is available even in :advanced release builds\n  (start))\n\n(defn stop []\n  ;; stop is called before any code\n\n  (js/console.log \"stop\"))\n\n; (defn fetch-todos []\n;   (-> (js/fetch  \"http://localhost:3000/todos\"  {:mode \"cors\"})\n;       (.then (fn [response] (.json response)))\n;       (.then (fn [json]\n;                (println \"Response from server:\" json)\n;                (swap! todos assoc (js->clj json :keywordize-keys true))))))\n; (fetch-todos)\n\n; (defn testAPI []\n;   (-> (js/fetch \"http://localhost:3000/todos\"  {:mode \"cors\"})\n;       (.then (fn [response] (.json response)))\n;       (.then (fn [json] (reset! todos (js->clj json :keywordize-keys true))))))\n\n; (testAPI)\n\n\n\n(defn fetchAll []\n  (-> (js/fetch \"http://localhost:3000/todos\"  {:mode \"cors\"})\n      (.then (fn [response] (.json response)))\n      (.then (fn [json] (let [clj-json (js->clj json :keywordize-keys true)\n                              todos-with-dates (map #(assoc % :limit_date (format-date (:limit_date %))) clj-json)]\n                          (reset! todos todos-with-dates)\n                          (rum/mount (hello-world)\n                                     (. js/document (getElementById \"app\"))))))))\n\n\n\n(fetchAll)"]}