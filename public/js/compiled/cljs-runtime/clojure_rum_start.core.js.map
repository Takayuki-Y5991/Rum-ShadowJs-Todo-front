{"version":3,"sources":["clojure_rum_start/core.cljs"],"mappings":";AAOA,GAAA,QAAAA,8CAAAC,mDAAAC;AAAA;AAAA,AAAA,AAASC,+BAAM,6CAAA,7CAACC;;AAEhB,qCAAA,AAAAC,oBAAAC,oBAAA,7EAAUyB;AAAV,AAAA,AAEU,AAACC,wDACC;AAAA,AACI,AAACC,0CAAU9B;;AACX,gHAAA,AAAA2B,zGAACI,yHAAS/B;GAHhB,mFAAA,AAAA2B,gBAIU3B;;AANpB,OAAAI,6BAAA,MAAA,KAAA,CAAA,AAAAA,6BAAA,MAAA,aAAA,WAAA,CAAA,AAAAA,6BAAA,KAAA,KAAA,CAAA,sFAAA,AAAAA,6BAAA,MAAA,KAAA,CAAA,AAAAA,6BAAA,KAAA,SAAA,aAAA,oBAAA,aAAA,CAAA,AAAAC,mDAAA,iBAAAC,qBAAA,6CAAAC,jVAUW,AAACyB,0CAAUhC;AAVtB,AAAA,YAAAQ,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAm8EmD,AAAA6B,sBAAAlC;IAn8EnDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAamBgB;AAbnB,AAAA,AAAA,AAAAd,uBAAAJ,SAckB,AAACmB,0CAAUD,KAAKjC;;AAdlC,eAAA,CAAAiB,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAamB0B;AAbnB,AAAA,OAAAR,4FAAA,AAAAH,mCAAA,AAAAI,eAAAnB,/HAckB,AAAC2B,0CAAUD,KAAKjC;;;AAdlC;;;;GAAA,KAAA;;AAAA,AAAA,OAAAM,mBAAA,AAAAqB,gBAayB3B;;GAbzB,KAAA;AAgBA,+BAAA,/BAAMmC;AAAN,AAGM,OAACC,eAAU,AAACR,qCACD,wBAAA,xBAAGS;;AAEpB,8BAAA,9BAAeC;AAAf,AAIM,OAACH;;;AAEP,8BAAA,9BAAMI;AAAN,AAEM,mBAAA,ZAACC","names":["js/clojure-rum-start","js/clojure-rum-start.core","js/clojure-rum-start.core.todos","clojure-rum-start.core/todos","cljs.core.atom","rum.core/lazy-build","rum.core/build-defc","daiquiri.core/create-element","cljs.core.into_array","iter__5523__auto__","s__14496","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__14498","cljs.core/chunk-buffer","i__14497","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__14495","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","clojure-rum-start.core/hello-world","rum.core.use_effect_BANG_","clojure-rum-start.client.client/fetch-all","cljs.core.println","clojure-rum-start.part.todoForm/todo-form","todo","clojure-rum-start.part.todoItem/todo-item","clojure-rum-start.core/start","rum.core/mount","js/document","clojure-rum-start.core/init","clojure-rum-start.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns clojure-rum-start.core\n  (:require [clojure-rum-start.client.client :refer [fetch-all]]\n            [clojure-rum-start.part.todoForm :refer [todo-form]]\n            [clojure-rum-start.part.todoItem :refer [todo-item]]\n            [clojure.string :as str]\n            [rum.core :as rum]))\n\n(defonce todos (atom nil))\n\n(rum/defc hello-world []\n          ; React Hooks Settings\n          (rum/use-effect!\n            (fn []\n                (fetch-all todos)\n                (println @todos)\n                ) [@todos])\n          [:div\n           [:div.heading\n            [:h1 \"MY TODO\"]]\n           (todo-form todos)\n           [:div\n            [:ul.container {:style {:list-style \"none\"}}\n             (for [todo @todos]\n                  (todo-item todo todos))]]])\n\n(defn start []\n      ;; start is called by init and after code reloading finishes\n      ;; this is controlled by the :after-load in the config\n      (rum/mount (hello-world)\n                 (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n      ;; init is called ONCE when the page loads\n      ;; this is called in the index.html and must be exported\n      ;; so it is available even in :advanced release builds\n      (start))\n\n(defn stop []\n      ;; stop is called before any code\n      (js/console.log \"stop\"))\n\n; (defn fetch-todos []\n;   (-> (js/fetch  \"http://localhost:3000/todos\"  {:mode \"cors\"})\n;       (.then (fn [response] (.json response)))\n;       (.then (fn [json]\n;                (println \"Response from server:\" json)\n;                (swap! todos assoc (js->clj json :keywordize-keys true))))))\n; (fetch-todos)\n\n; (defn testAPI []\n;   (-> (js/fetch \"http://localhost:3000/todos\"  {:mode \"cors\"})\n;       (.then (fn [response] (.json response)))\n;       (.then (fn [json] (reset! todos (js->clj json :keywordize-keys true))))))\n\n; (testAPI)\n;(fetch-all todos)\n\n"]}