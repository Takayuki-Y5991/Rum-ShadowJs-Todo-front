{"version":3,"sources":["clojure_rum_start/core.cljs"],"mappings":";AAMA,qCAAA,AAAAA,oBAAAC,oBAAA,7EAAU0B;AAAV,AAAA,AAAA,IAAAzB,aAC0B,mBAAA,nBAAC4B;YAD3B,AAAA3B,4CAAAD,WAAA,IAAA,nEACS0B;gBADT,AAAAzB,4CAAAD,WAAA,IAAA,vEACe2B;AADf,AAEI,AAACE,wDACA;AAAA,AACE,AAACC,yCAAS,WAAKC;AAAL,AACE,GAAU,AAACC,6CAAED,UAAUL;AAAvB;;AAAA,AACE,QAACC,0CAAAA,qDAAAA,bAAUI,iCAAAA;;;;AACzB,OAACE,yGAAQP;GALZ,mFAMEA;;AARN,OAAAxB,6BAAA,MAAA,KAAA,CAAA,AAAAA,6BAAA,MAAA,aAAA,WAAA,CAAA,AAAAA,6BAAA,KAAA,KAAA,CAAA,yEAAA,AAAAA,6BAAA,MAAA,KAAA,CAAA,AAAAA,6BAAA,KAAA,SAAA,aAAA,oBAAA,aAAA,CAAA,AAAAC,mDAAA,iBAAAC,qBAAA,6CAAAC,pUAYK,AAAC6B,0CAAUR,MAAMC;AAZtB,AAAA,YAAArB,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAs8EmD,AAAAiC,sBAAAtC;IAt8EnDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,WAAA,AAAAK,eAAAN,gBAAAK,tCAeaoB;AAfb,AAAA,AAAA,AAAAlB,uBAAAJ,SAgBS,AAACuB,0CAAUD,KAAKT,MAAMC;;AAhB/B,eAAA,CAAAZ,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,WAAA,AAAAS,gBAAAjB,vBAea8B;AAfb,AAAA,OAAAZ,+EAAA,AAAAH,mCAAA,AAAAI,eAAAnB,lHAgBS,AAAC+B,0CAAUD,KAAKT,MAAMC;;;AAhB/B;;;;GAAA,KAAA;;AAAA,AAAA,OAAAvB,mBAekBsB;;GAflB,KAAA;AAmBA,+BAAA,/BAAMW;AAAN,AAGM,OAACC,eAAU,AAACb,qCACD,wBAAA,xBAAGc;;AAEpB,8BAAA,9BAAeC;AAAf,AAIM,OAACH;;;AAEP,8BAAA,9BAAMI;AAAN,AAEM,mBAAA,ZAACC","names":["rum.core/lazy-build","rum.core/build-defc","vec__16064","cljs.core.nth","daiquiri.core/create-element","cljs.core.into_array","iter__5523__auto__","s__16070","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__16072","cljs.core/chunk-buffer","i__16071","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__16069","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","clojure-rum-start.core/hello-world","todos","set-todos","rum.core/use-state","rum.core.use_effect_BANG_","clojure-rum-start.client.client/fetchAll","new-todos","cljs.core._EQ_","cljs.core.println","clojure-rum-start.part.todoForm/todo-form","todo","clojure-rum-start.part.todoItem/todo-item","clojure-rum-start.core/start","rum.core/mount","js/document","clojure-rum-start.core/init","clojure-rum-start.core/stop","js/console.log","cljs.core/chunk-first"],"sourcesContent":["(ns clojure-rum-start.core\n  (:require [clojure-rum-start.part.todoForm :refer [todo-form]]\n            [clojure-rum-start.part.todoItem :refer [todo-item]]\n            [clojure-rum-start.client.client :refer [fetchAll]]\n            [rum.core :as rum]))\n\n(rum/defc hello-world []\n  (let [[todos set-todos] (rum/use-state [])]\n    (rum/use-effect!\n     (fn []\n       (fetchAll (fn [new-todos]\n                   (when-not (= new-todos todos)\n                     (set-todos new-todos))))\n       (println todos))\n     [todos])\n    [:div\n     [:div.heading\n      [:h1 \"MY TODO\"]]\n     (todo-form todos set-todos)\n     [:div\n      [:ul.container {:style {:list-style \"none\"}}\n       (for [todo todos]\n         (todo-item todo todos set-todos))]]]))\n\n\n(defn start []\n      ;; start is called by init and after code reloading finishes\n      ;; this is controlled by the :after-load in the config\n      (rum/mount (hello-world)\n                 (. js/document (getElementById \"app\"))))\n\n(defn ^:export init []\n      ;; init is called ONCE when the page loads\n      ;; this is called in the index.html and must be exported\n      ;; so it is available even in :advanced release builds\n      (start))\n\n(defn stop []\n      ;; stop is called before any code\n      (js/console.log \"stop\"))\n"]}